package com.istech.lighthouse.activities

import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.view.View
import android.view.View.OnFocusChangeListener
import android.widget.Button
import android.widget.Toast
import androidx.activity.result.ActivityResult
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.databinding.DataBindingUtil
import com.google.gson.JsonObject
import com.istech.lighthouse.R
import com.istech.lighthouse.adapter.RecentPaymentAdapter
import com.istech.lighthouse.api.Global
import com.istech.lighthouse.databinding.ActivityRechargeAcivityBinding
import com.istech.lighthouse.model.RazorPayOrderModel
import com.istech.lighthouse.model.recharge.RechargeMeter
import com.istech.lighthouse.utils.BaseActivity
import com.istech.lighthouse.utils.Constants.Companion.AMOUNT
import com.istech.lighthouse.utils.Constants.Companion.CONSUMER_ID
import com.istech.lighthouse.utils.Constants.Companion.STATUS
import com.istech.lighthouse.utils.Constants.Companion.TRANSACTION_ID
import com.istech.lighthouse.utils.SessionManager
import com.istech.lighthouse.utils.SessionManager.*
import com.razorpay.Checkout
import com.razorpay.PaymentResultListener
import io.reactivex.android.schedulers.AndroidSchedulers
import io.reactivex.disposables.CompositeDisposable
import io.reactivex.schedulers.Schedulers
import org.json.JSONObject
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import java.lang.NumberFormatException
import java.util.HashMap
import com.easebuzz.payment.kit.PWECouponsActivity;
import datamodels.PWEStaticDataModel;

class RechargeAcivity : BaseActivity(), View.OnClickListener, PaymentResultListener {
    private var pweActivityResultLauncher: ActivityResultLauncher<Intent>? = null
    override fun onPaymentError(errorCode: Int, response: String?) {
        //rechargeMeterAPI("Failed",orderID.toString())
        Toast.makeText(this,"Payment Failed",Toast.LENGTH_LONG).show();//satyam
    }

    override fun onPaymentSuccess(razorpayPaymentId: String?) {
        rechargeMeterAPI("Success",razorpayPaymentId.toString())
    }

    private lateinit var binding: ActivityRechargeAcivityBinding
    private lateinit var btnRecharge: Button
    private var amount: String? = null
    private var consumerId: String? = null
    private var orderID: String? = null
    //    private var razorPay:Checkout = Checkout()
    private var adapter = RecentPaymentAdapter()
    private var email = ""
    private var mobileNo = ""
    private val TAG = "RechargeAcivity"
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = DataBindingUtil.setContentView(this, R.layout.activity_recharge_acivity)
        initView()
        bindView()
        println("razorpayidcheck"+sessionManager.razorPayKey)
//        razorPay.setKeyID(sessionManager.razorPayKey)
    }

//    private fun bindView() {
//        btnRecharge = binding.btnRecharge
//        btnRecharge.setOnClickListener {
//            //startPayment()
//            val intentProceed = Intent(baseContext, PWECouponsActivity::class.java)
//            intentProceed.flags = Intent.FLAG_ACTIVITY_REORDER_TO_FRONT;
//        intentProceed.putExtra("access_key", "2PBP7IABZ2");
//          //  intentProceed.putExtra("access_key","Access key generated by the Initiate Payment API")
////            //intsentProceed.putExtra("pay_mode", "This will either be test or production")
//            intentProceed.putExtra("pay_mode", "EVWLDM10H")
//            pweActivityResultLauncher!!.launch(intentProceed)
//
//            pweActivityResultLauncher = registerForActivityResult<Intent, ActivityResult>(
//                ActivityResultContracts.StartActivityForResult()) { result ->
//                val data = result.data
//                if (data != null) {
//                    val result = data.getStringExtra("result")
//                    val payment_response = data.getStringExtra("payment_response")
//                    try {
//                        // Handle response here
//                    } catch (e: Exception) {
//                        // Handle exception here
//                    }
//                }
//            }
//        }
//    }
private fun bindView() {
    btnRecharge = binding.btnRecharge

    // Initialize the ActivityResultLauncher here
    pweActivityResultLauncher = registerForActivityResult<Intent, ActivityResult>(
        ActivityResultContracts.StartActivityForResult()) { result ->
        val data = result.data
        if (data != null) {
            val result = data.getStringExtra("result")
            val payment_response = data.getStringExtra("payment_response")
            try {
                // Handle response here
            } catch (e: Exception) {
                // Handle exception here
            }
        }
    }

    btnRecharge.setOnClickListener {
        val intentProceed = Intent(baseContext, PWECouponsActivity::class.java)
        intentProceed.flags = Intent.FLAG_ACTIVITY_REORDER_TO_FRONT;
//        intentProceed.putExtra("access_key", "2PBP7IABZ2");
        intentProceed.putExtra("access_key", "ab6fe9ecea7b03a27256bf144e69527c04c85bee841cce4de9c35d6827dfc761");

        intentProceed.putExtra("salt", "EVWLDM10H");

        intentProceed.putExtra("pay_mode", "test");

        pweActivityResultLauncher!!.launch(intentProceed)
    }
}


    private fun initView() {
//        binding.rlHeader.apply {
        binding.ivBack.setOnClickListener {
            onBackPressed()
        }
        binding.rvRecentPayments.adapter = adapter
//            tvTitle.text = "Recharge"
//        }
        getRecentData()
    }
    private val disposable: CompositeDisposable = CompositeDisposable()

    private fun getRecentData(){
        binding.progressBar.visibility=View.VISIBLE
        disposable.add(Global.initRetrofit().getRecentRecharge(header).subscribeOn(Schedulers.io())
            .observeOn(AndroidSchedulers.mainThread())
            .unsubscribeOn(Schedulers.io()).subscribe{ home , throwable ->
                if (home!=null){
                    binding.tvCurrent.text="₹ "+ checkEmptyOrNull(home.data.currentAmount)
                    binding.etCustomerId.setText(home.data.consumerID)
                    adapter.updateData(home.data.getRecents)
                    email = home.data.email
                    mobileNo = home.data.mobileNo
                    if (home.data.isChequeBounce){
                        binding.llLastChequeAmount.visibility = View.VISIBLE
                        binding.llPenaltyAmount.visibility = View.VISIBLE
                        binding.tvLastCheckedAmount.text = "₹ "+ checkEmptyOrNull(home.data.lastChequeAmount.toString())
                        binding.tvPenaltyAmount.text = "₹ "+ checkEmptyOrNull(home.data.penalityAmount.toString())
                    }else{
                        binding.llLastChequeAmount.visibility = View.GONE
                        binding.llPenaltyAmount.visibility = View.GONE
                    }
                    binding.llBalanceAmount.visibility= View.VISIBLE
                    if (home.data.getRecents.size==0){
                        binding.rvRecentPayments.visibility=View.GONE
                        binding.tvNoData.visibility=View.VISIBLE
                    }else{
                        binding.rvRecentPayments.visibility=View.VISIBLE
                        binding.tvNoData.visibility=View.GONE
                    }
                    binding.progressBar.visibility=View.GONE
                }
            }
        )
    }

    override fun onClick(view: View?) {
        binding.etAmount.onFocusChangeListener = OnFocusChangeListener { _, hasFocus ->
            if (hasFocus) binding.etAmount.hint = "" else binding.etAmount.hint = "Your hint"
        }
        if (view == btnRecharge){
            amount = binding.etAmount.text.toString().trim()
            if (amount!!.isEmpty() && amount.equals("", ignoreCase = true)){
                binding.tilAmount.error = "Please enter amount"
            } else if (amount!!.contains("-")){
                binding.tilAmount.error = "Please enter correct amount"
            }else if (amount!!.contains(".")){
                binding.tilAmount.error = "Please enter correct amount"
            }else if (amount!!.contains(",")){
                binding.tilAmount.error = "Please enter correct amount"
            }
            else if (!isNumeric(amount!!)){
                binding.tilAmount.error = "Please enter correct amount"
            } else{
                if (binding.etAmount.text.toString().toInt()<50){//lower limit
                    binding.tilAmount.error="Please enter amount min Rs50"
                }else
                    if (binding.etAmount.text.toString().toInt()>30000){//upper limit
                        binding.tilAmount.error="Please enter amount max Rs3000"
                    }else {
                        Log.d(TAG, "onClick: $amount")
                        binding.tilAmount.isErrorEnabled = false;
                        binding.etAmount.setText("")
                        getRechargeOrderID()
                    }
            }
        }
    }

    private fun isNumeric(str: String): Boolean {
        return try {
            str.toLong()
            true
        } catch (e: NumberFormatException) {
            false
        }
    }

    private fun rechargeMeterAPI(status:String,trxnId:String) { //razorpay api with account details
        consumerId = sessionManager.user.data.userName

        val jsonObject = JsonObject()
        jsonObject.addProperty(CONSUMER_ID, consumerId)
        jsonObject.addProperty(AMOUNT, amount)
        jsonObject.addProperty(TRANSACTION_ID, trxnId)
        jsonObject.addProperty(STATUS, status)

        Global.initRetrofit().getRechargeMeter(header, jsonObject)
            ?.enqueue(object : Callback<RechargeMeter?> {
                override fun onResponse(
                    call: Call<RechargeMeter?>,
                    response: Response<RechargeMeter?>
                ) {
                    if (response.isSuccessful && response.body() != null && response.body()!!.success) {
                        Log.d(TAG, "onResponse: " + response.body()?.message)
                        Toast.makeText(applicationContext, response.body()?.message, Toast.LENGTH_SHORT).show()
                        orderID = null
                        amount = null
                        consumerId = null
                        getRecentData()
                    } else {
                        Log.d(TAG, "onResponse: " + response.body())
                    }
                }
                override fun onFailure(call: Call<RechargeMeter?>, t: Throwable) {
                    t.printStackTrace()
                }
            })
    }


    private fun getRechargeOrderID() {
        val map = HashMap<String, Any>()
        map["amt"] = amount.toString()
        Global.initRetrofit().getRechargeOrderID(header, map)?.enqueue(object : Callback<RazorPayOrderModel?> {
            override fun onResponse(call: Call<RazorPayOrderModel?>, response: Response<RazorPayOrderModel?>) {
                if (response.isSuccessful && response.body() != null && response.body()!!.success) {
                    Log.d(TAG, "onResponse getMarkAsRead: " + response.body()!!.message)
                    orderID = response.body()!!.data
                    startPayment()
                } else {
                    Log.d(TAG, "onResponse getMarkAsRead: " + response.body())
                }
            }
            override fun onFailure(call: Call<RazorPayOrderModel?>, t: Throwable) {
                t.printStackTrace()
            }
        })
    }

    private fun startPayment() {
        val checkout = Checkout()
        checkout.setKeyID("rzp_test_wwow1QUddYXzwr")
        try {
            val options = JSONObject()
            options.put("name", "Lighthouse Iot Solution")
            options.put("description", "Online Payment")
            options.put("theme.color", "#FE8D27")
            options.put("currency", "INR")
            options.put("amount", amount)
            Toast.makeText(applicationContext, "TotalAmount$amount",Toast.LENGTH_LONG)
            val payment = JSONObject()
            payment.put("capture", "automatic")
            options.put("payment", payment)
           
            checkout.open(this, options)
        }catch (e: Exception){
            Toast.makeText(this,"Error in payment: "+ e.message,Toast.LENGTH_LONG).show()
            e.printStackTrace()
        }
    }


}